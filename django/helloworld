https://www.cnblogs.com/liaocheng/p/5218843.html
第一部分
1.
[root@solar django]# python
Python 3.7.0 (default, Jun 28 2018, 13:15:42)
[GCC 4.8.0] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import django
>>> django.VERSION
(2, 1, 5, 'final', 0)
2.
django-admin.py startproject HelloWorld (新建一个项目HelloWorld，)
[root@solar ~]# cd HelloWorld/
[root@solar HelloWorld]# tree (HelloWorld/里面的结构)
.
|-- HelloWorld
|   |-- __init__.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
`-- manage.py
********************************************************************
目录说明：
    HelloWorld: 项目的容器。
    manage.py: 一个实用的命令行工具，可让你以各种方式与该 Django 项目进行交互。
    HelloWorld/__init__.py: 一个空文件，告诉 Python 该目录是一个 Python 包。
    HelloWorld/settings.py: 该 Django 项目的设置/配置。
    HelloWorld/urls.py: 该 Django 项目的 URL 声明; 一份由 Django 驱动的网站"目录"。
    HelloWorld/wsgi.py: 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。
 ********************************
 在项目myweb路径下创建app
 django-admin.py startapp myapp
 ── myweb
    ├── manage.py
    ├── myapp
    │   ├── admin.py
    │   ├── apps.py
    │   ├── __init__.py
    │   ├── migrations
    │   │   └── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py
    └── myweb
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py
 ********************************
 进入 HelloWorld 目录,python manage.py runserver 查看本机IP
January 12, 2019 - 00:09:55
Django version 2.1.5, using settings 'HelloWorld.settings'
Starting development server at http://127.0.0.1:8000/  访问地址为http://127.0.0.1:8000/
python manage.py runserver 0.0.0.0:8000   启动服务器0.0.0.0:8000（服务器地址），如果successful 说明正常启动服务器
0.0.0.0让其它电脑可连接到开发服务器，8000为端口号。如果不说明，那么端口号默认为8000。
在服务器端输入IP:8000直接访问

3.
  3.1
  HelloWorld 目录(即wsgi.py所在目录)新建一个 view.py 文件，并输入代码：(view相当于一个模块，hello相当于模块里面的函数)
  from django.http import HttpResponse
  def hello(request):
    return HttpResponse("Hello world ! ")
  3.2
  接着，绑定 URL 与视图函数。打开 urls.py 文件，删除原来代码，将以下代码复制粘贴到 urls.py 文件中：
  from django.conf.urls import url
  from . import view  (从urls.py当前目录下调用view模块)
  urlpatterns = [
      url(r'^hello/$',view.hello),  #^hello/$  是访问地址后缀，view.hello调用view库的hello函数  
                  ]
第二部分
Django 模板(以上我们使用 django.http.HttpResponse() 来输出"Hello World！"。该方式将数据与视图混合在一起，不符合Django的MVC思想。)
****************************************************
MVC的全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。
它是用一种业务逻辑、数据与界面显示分离的方法来组织代码，将众多的业务逻辑聚集到一个部件里面，在需要改进和个性化定制界面及用户交互的同时，
不需要重新编写业务逻辑，达到减少编码的时间。
使用的MVC的目的：在于将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如Windows系统资源管理器文件夹内容的显示方式，
下面两张图中左边为详细信息显示方式，右边为中等图标显示方式，文件的内容并没有改变，改变的是显示的方式。
不管用户使用何种类型的显示方式，文件的内容并没有改变，达到M和V分离的目的。
*****************************************************
1.
模板应用 (在目录底下创建 templates 目录并建立 hello.html文件)
.
├── db.sqlite3
├── HelloWorld
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-37.pyc
│   │   ├── settings.cpython-37.pyc
│   │   ├── urls.cpython-37.pyc
│   │   ├── view.cpython-37.pyc
│   │   └── wsgi.cpython-37.pyc
│   ├── settings.py
│   ├── urls.py
│   ├── view.py
│   └── wsgi.py
├── manage.py
└── templates
    └── hello.html
在hello.html文件中输入：<h1>{{ hello }}</h1>，从模板中我们知道变量使用了双括号。
******************
<h1></h1>这个是用来表示字体大小的标签,<h1>Hello!</h1>显示的Hello就是一号字
类同还有<h2></h2>,<h3></h3>等等。
例如：<font size="3" color="red">This is some text!</font> 红色三号字体
******************
2.
接下来我们需要向Django说明模板文件的路径，修改HelloWorld/settings.py，修改 TEMPLATES 中的 DIRS 为[BASE_DIR+"/templates",]，如下所示:
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR+"/templates",],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
3.
我们现在修改 view.py，增加一个新的对象，用于向模板提交数据：
# -*- coding: utf-8 -*-
#from django.http import HttpResponse
from django.shortcuts import render  (render来替代之前使用的HttpResponse)
def hello(request):
    context = {}
    context['hello'] = 'Hello World!'
    return render(request, 'hello.html', context)
可以看到，我们这里使用render来替代之前使用的HttpResponse。render还使用了一个字典context作为参数。
context 字典中元素的键值 "hello" 对应了模板中的变量 "{{ hello }}"。


  




